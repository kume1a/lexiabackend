// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// FoldersColumns holds the columns for the "folders" table.
	FoldersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "word_count", Type: field.TypeInt32},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"FOLDER_COLLECTION", "WORD_COLLECTION"}, Default: "WORD_COLLECTION"},
		{Name: "language_from", Type: field.TypeEnum, Nullable: true, Enums: []string{"ENGLISH", "GEORGIAN"}},
		{Name: "language_to", Type: field.TypeEnum, Nullable: true, Enums: []string{"ENGLISH", "GEORGIAN"}},
		{Name: "user_folders", Type: field.TypeUUID, Nullable: true},
	}
	// FoldersTable holds the schema information for the "folders" table.
	FoldersTable = &schema.Table{
		Name:       "folders",
		Columns:    FoldersColumns,
		PrimaryKey: []*schema.Column{FoldersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "folders_users_folders",
				Columns:    []*schema.Column{FoldersColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  true,
				Columns: []*schema.Column{UsersColumns[4]},
			},
		},
	}
	// WordsColumns holds the columns for the "words" table.
	WordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "text", Type: field.TypeString},
		{Name: "definition", Type: field.TypeString},
		{Name: "folder_words", Type: field.TypeUUID, Nullable: true},
	}
	// WordsTable holds the schema information for the "words" table.
	WordsTable = &schema.Table{
		Name:       "words",
		Columns:    WordsColumns,
		PrimaryKey: []*schema.Column{WordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "words_folders_words",
				Columns:    []*schema.Column{WordsColumns[5]},
				RefColumns: []*schema.Column{FoldersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// FolderSubfoldersColumns holds the columns for the "folder_subfolders" table.
	FolderSubfoldersColumns = []*schema.Column{
		{Name: "folder_id", Type: field.TypeUUID},
		{Name: "parent_id", Type: field.TypeUUID},
	}
	// FolderSubfoldersTable holds the schema information for the "folder_subfolders" table.
	FolderSubfoldersTable = &schema.Table{
		Name:       "folder_subfolders",
		Columns:    FolderSubfoldersColumns,
		PrimaryKey: []*schema.Column{FolderSubfoldersColumns[0], FolderSubfoldersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "folder_subfolders_folder_id",
				Columns:    []*schema.Column{FolderSubfoldersColumns[0]},
				RefColumns: []*schema.Column{FoldersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "folder_subfolders_parent_id",
				Columns:    []*schema.Column{FolderSubfoldersColumns[1]},
				RefColumns: []*schema.Column{FoldersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		FoldersTable,
		UsersTable,
		WordsTable,
		FolderSubfoldersTable,
	}
)

func init() {
	FoldersTable.ForeignKeys[0].RefTable = UsersTable
	WordsTable.ForeignKeys[0].RefTable = FoldersTable
	FolderSubfoldersTable.ForeignKeys[0].RefTable = FoldersTable
	FolderSubfoldersTable.ForeignKeys[1].RefTable = FoldersTable
}
